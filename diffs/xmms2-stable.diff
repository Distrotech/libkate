diff --git a/INSTALL b/INSTALL
index 4141faa..7dd4da1 100644
--- a/INSTALL
+++ b/INSTALL
@@ -20,6 +20,7 @@ These libraries are '''not needed''' for building xmms2d itself, but will add ex
 ** [http://www.underbit.com/products/mad/ MAD] (Ubuntu and debian users will want libmad0-dev) - For listening to MPEG files (MPEG 1 & 2 layers I, II and III - includes MP3)
 ** [http://www.audiocoding.com/ FAAD] - For listening to AAC.
 ** [http://www.xiph.org Vorbisfile] - For listening to Ogg Vorbis.
+** [http://libkate.googlecode.com/ libkate] - For synced lyrics in Ogg Vorbis streams.
 ** [http://sidplay2.sourceforge.net/ SIDplay2] - For listening to SIDs.
 ** [http://www.geocities.com/SiliconValley/Lakes/5147/resid/ reSID] - For listening to SIDs.
 ** [http://flac.sourceforge.net/ libFLAC] - for FLAC support
diff --git a/src/clients/lib/python/xmmsapi.pyx b/src/clients/lib/python/xmmsapi.pyx
index 04b5548..61b7aef 100644
--- a/src/clients/lib/python/xmmsapi.pyx
+++ b/src/clients/lib/python/xmmsapi.pyx
@@ -241,12 +241,14 @@ cdef extern from "xmmsclient/xmmsclient.h":
 	xmmsc_result_t *xmmsc_playback_seek_samples(xmmsc_connection_t *c, unsigned int samples)
 	xmmsc_result_t *xmmsc_playback_seek_samples_rel(xmmsc_connection_t *c, int samples)
 	xmmsc_result_t *xmmsc_playback_playtime(xmmsc_connection_t *c)
+	xmmsc_result_t *xmmsc_playback_lyrics(xmmsc_connection_t *c)
 	xmmsc_result_t *xmmsc_playback_status(xmmsc_connection_t *c)
 
 	xmmsc_result_t *xmmsc_broadcast_playback_status(xmmsc_connection_t *c)
 	xmmsc_result_t *xmmsc_broadcast_playback_current_id(xmmsc_connection_t *c)
 
 	xmmsc_result_t *xmmsc_signal_playback_playtime(xmmsc_connection_t *c)
+	xmmsc_result_t *xmmsc_signal_playback_lyrics(xmmsc_connection_t *c)
 
 	xmmsc_result_t *xmmsc_playback_volume_set (xmmsc_connection_t *c, char *channel, unsigned int volume)
 	xmmsc_result_t *xmmsc_playback_volume_get (xmmsc_connection_t *c)
@@ -1434,6 +1436,27 @@ cdef class XMMS:
 		"""
 		return self.create_result(cb, xmmsc_signal_playback_playtime(self.conn))
 
+	def playback_lyrics(self, cb = None):
+		"""
+		playback_lyrics(cb=None) -> XMMSResult
+
+		Return current lyrics on current file/stream. This is essentially a
+		more direct version of L{signal_playback_lyrics}
+		@rtype: L{XMMSResult}(String)
+		@return: The result of the operation.(lyrics as a string)
+		"""
+		return self.create_result(cb, xmmsc_playback_lyrics(self.conn))
+		
+	def signal_playback_lyrics(self, cb = None):
+		"""
+		signal_playback_lyrics(cb=None) -> XMMSResult
+
+		Set a method to handle the playback lyrics signal from the
+		XMMS2 daemon.
+		@rtype: L{XMMSResult}(UInt)
+		"""
+		return self.create_result(cb, xmmsc_signal_playback_lyrics(self.conn))
+
 	def playback_volume_set(self, channel, volume, cb = None):
 		"""
 		playback_volume_set(channel, volume, cb=None) -> XMMSResult
diff --git a/src/clients/lib/xmmsclient++/playback.cpp b/src/clients/lib/xmmsclient++/playback.cpp
index 023486f..92e97d8 100644
--- a/src/clients/lib/xmmsclient++/playback.cpp
+++ b/src/clients/lib/xmmsclient++/playback.cpp
@@ -121,6 +121,13 @@ namespace Xmms
 		return UintResult( res, ml_ );
 	}
 
+	StringResult Playback::getLyrics() const
+	{
+		xmmsc_result_t* res = 
+		    call( connected_, boost::bind( xmmsc_playback_lyrics, conn_ ) );
+		return StringResult( res, ml_ );
+	}
+
 	VoidResult Playback::volumeSet(const std::string& channel,
 	                               unsigned int volume) const
 	{
@@ -171,6 +178,14 @@ namespace Xmms
 		return UintSignal( res, ml_ );
 	}
 
+	StringSignal Playback::signalLyrics() const
+	{
+		xmmsc_result_t* res =
+		    call( connected_,
+		          boost::bind( xmmsc_signal_playback_lyrics, conn_ ) );
+		return StringSignal( res, ml_ );
+	}
+
 	Playback::Playback( xmmsc_connection_t*& conn, bool& connected,
 	                    MainloopInterface*& ml ) :
 		conn_( conn ), connected_( connected ), ml_( ml )
diff --git a/src/clients/lib/xmmsclient/playback.c b/src/clients/lib/xmmsclient/playback.c
index 48bbdc9..d7e5948 100644
--- a/src/clients/lib/xmmsclient/playback.c
+++ b/src/clients/lib/xmmsclient/playback.c
@@ -279,5 +279,29 @@ xmmsc_broadcast_playback_volume_changed (xmmsc_connection_t *c)
 	return xmmsc_send_broadcast_msg (c, XMMS_IPC_SIGNAL_OUTPUT_VOLUME_CHANGED);
 }
 
+/**
+ * Requests the lyrics signal. This will be called when
+ * lyrics change (new ones, or end of the current one).
+ */
+xmmsc_result_t *
+xmmsc_signal_playback_lyrics (xmmsc_connection_t *c)
+{
+	x_check_conn (c, NULL);
+
+	return xmmsc_send_signal_msg (c, XMMS_IPC_SIGNAL_LYRICS);
+}
+
+/**
+ * Make server emit the current lyrics.
+ */
+xmmsc_result_t *
+xmmsc_playback_lyrics (xmmsc_connection_t *c)
+{
+	x_check_conn (c, NULL);
+
+	return xmmsc_send_msg_no_arg (c, XMMS_IPC_OBJECT_OUTPUT,
+	                              XMMS_IPC_CMD_LYRICS);
+}
+
 /** @} */
 
diff --git a/src/include/xmms/xmms_xformplugin.h b/src/include/xmms/xmms_xformplugin.h
index 12d9491..a9858b6 100644
--- a/src/include/xmms/xmms_xformplugin.h
+++ b/src/include/xmms/xmms_xformplugin.h
@@ -149,6 +149,13 @@ typedef struct xmms_xform_methods_St {
 	 * This is called without init() beeing called.
 	 */
 	gboolean (*browse)(xmms_xform_t *, const gchar *, xmms_error_t *);
+
+	/**
+	 * lyrics method.
+	 *
+	 * Called to retrieve the current lyrics.
+	 */
+	gboolean (*lyrics)(xmms_xform_t *, xmms_error_t *);
 } xmms_xform_methods_t;
 
 #define XMMS_XFORM_METHODS_INIT(m) memset (&m, 0, sizeof (xmms_xform_methods_t))
@@ -317,6 +324,8 @@ xmms_config_property_t *xmms_xform_config_lookup (xmms_xform_t *xform,
 xmms_medialib_entry_t xmms_xform_entry_get (xmms_xform_t *xform);
 const gchar *xmms_xform_get_url (xmms_xform_t *xform);
 
+void xmms_xform_set_lyrics (xmms_xform_t *xform, const gchar *lyrics);
+
 #define XMMS_XFORM_BROWSE_FLAG_DIR (1 << 0)
 
 void xmms_xform_browse_add_entry (xmms_xform_t *xform, const gchar *path, guint32 flags);
diff --git a/src/include/xmmsc/xmmsc_idnumbers.h b/src/include/xmmsc/xmmsc_idnumbers.h
index 6233897..6bfd8d6 100644
--- a/src/include/xmmsc/xmmsc_idnumbers.h
+++ b/src/include/xmmsc/xmmsc_idnumbers.h
@@ -69,6 +69,7 @@ typedef enum {
 	XMMS_IPC_SIGNAL_QUIT,
 	XMMS_IPC_SIGNAL_MEDIAINFO_READER_STATUS,
 	XMMS_IPC_SIGNAL_MEDIAINFO_READER_UNINDEXED,
+	XMMS_IPC_SIGNAL_LYRICS,
 	XMMS_IPC_SIGNAL_END
 } xmms_ipc_signals_t;
 
@@ -122,6 +123,7 @@ typedef enum {
 	XMMS_IPC_CMD_CURRENTID,
 	XMMS_IPC_CMD_VOLUME_SET,
 	XMMS_IPC_CMD_VOLUME_GET,
+	XMMS_IPC_CMD_LYRICS,
 
 	/* Medialib */
 	XMMS_IPC_CMD_INFO,
diff --git a/src/include/xmmsclient/xmmsclient.h b/src/include/xmmsclient/xmmsclient.h
index b167aa8..4e71d45 100644
--- a/src/include/xmmsclient/xmmsclient.h
+++ b/src/include/xmmsclient/xmmsclient.h
@@ -120,6 +120,7 @@ xmmsc_result_t *xmmsc_playback_tickle (xmmsc_connection_t *c);
 xmmsc_result_t *xmmsc_playback_start (xmmsc_connection_t *c);
 xmmsc_result_t *xmmsc_playback_pause (xmmsc_connection_t *c);
 xmmsc_result_t *xmmsc_playback_current_id (xmmsc_connection_t *c);
+xmmsc_result_t *xmmsc_playback_lyrics (xmmsc_connection_t *c);
 xmmsc_result_t *xmmsc_playback_seek_ms (xmmsc_connection_t *c, uint32_t milliseconds);
 xmmsc_result_t *xmmsc_playback_seek_ms_rel (xmmsc_connection_t *c, int milliseconds);
 xmmsc_result_t *xmmsc_playback_seek_samples (xmmsc_connection_t *c, uint32_t samples);
@@ -136,6 +137,7 @@ xmmsc_result_t *xmmsc_broadcast_playback_current_id (xmmsc_connection_t *c);
 
 /* signals */
 xmmsc_result_t *xmmsc_signal_playback_playtime (xmmsc_connection_t *c);
+xmmsc_result_t *xmmsc_signal_playback_lyrics (xmmsc_connection_t *c);
 
 
 /*
diff --git a/src/includepriv/xmmspriv/xmms_xform.h b/src/includepriv/xmmspriv/xmms_xform.h
index 2b1b823..3044528 100644
--- a/src/includepriv/xmmspriv/xmms_xform.h
+++ b/src/includepriv/xmmspriv/xmms_xform.h
@@ -51,6 +51,8 @@ void xmms_xform_outdata_type_set (xmms_xform_t *xform, xmms_stream_type_t *type)
 GList *xmms_xform_browse (xmms_xform_object_t *obj, const gchar *url, xmms_error_t *error);
 GList *xmms_xform_browse_method (xmms_xform_t *xform, const gchar *url, xmms_error_t *error);
 
+gchar *xmms_xform_lyrics (xmms_xform_t *xform, xmms_error_t *error);
+
 const char *xmms_xform_indata_find_str (xmms_xform_t *xform, xmms_stream_type_key_t key);
 
 #define XMMS_XFORM_BUILTIN(shname, name, ver, desc, setupfunc) XMMS_BUILTIN(XMMS_PLUGIN_TYPE_XFORM, XMMS_XFORM_API_VERSION, shname, name, ver, desc, (gboolean (*)(gpointer))setupfunc)
diff --git a/src/plugins/kate/kate.c b/src/plugins/kate/kate.c
new file mode 100644
index 0000000..343de2c
--- /dev/null
+++ b/src/plugins/kate/kate.c
@@ -0,0 +1,664 @@
+/*  XMMS2 - X Music Multiplexer System
+ *  Copyright (C) 2003-2008 XMMS2 Team
+ *  Copyright (C) 2008 ogg.k.ogg.k@googlemail.com
+ *
+ *  PLUGINS ARE NOT CONSIDERED TO BE DERIVED WORK !!!
+ *
+ *  This library is free software; you can redistribute it and/or
+ *  modify it under the terms of the GNU Lesser General Public
+ *  License as published by the Free Software Foundation; either
+ *  version 2.1 of the License, or (at your option) any later version.
+ *
+ *  This library is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  Lesser General Public License for more details.
+ */
+
+
+
+
+/**
+  * @file kate decoder.
+  * @url http://wiki.xiph.org/index.php/OggKate
+  */
+
+
+#include "xmms/xmms_xformplugin.h"
+#include "xmms/xmms_log.h"
+#include "xmms/xmms_ipc.h"
+
+#include <ogg/ogg.h>
+#include <kate/kate.h>
+
+#include <glib.h>
+#include <unistd.h>
+
+typedef struct {
+    char *text;
+    double t;
+} lyrics_event;
+
+typedef struct xmms_kate_data_St {
+    ogg_sync_state ksy;
+    ogg_stream_state kst;
+    kate_state k;
+    enum { kis_none, kis_sync, kis_all } kate_init_state;
+    size_t num_lyrics_events;
+    lyrics_event *lyrics_events;
+    GThread *thread;
+    GMutex *mutex;
+    gboolean running;
+    gchar *current_lyrics;
+
+    /* Playtime approximation since we can't know playtime, but we want to sync lyrics anyway.
+       See comments in xmms_kate_get_now for details. */
+    GTimer *read_timer; /* elapsed since last read */
+    double time_between_reads;
+    double last_read_start_time; /* roughly estimated timestamp of the start of the last read buffer */
+} xmms_kate_data_t;
+
+/*
+ * Function prototypes
+ */
+
+static gboolean xmms_kate_plugin_setup (xmms_xform_plugin_t *xform_plugin);
+static gint xmms_kate_read (xmms_xform_t *xform, xmms_sample_t *buf, gint len, xmms_error_t *err);
+static gboolean xmms_kate_init (xmms_xform_t *decoder);
+static void xmms_kate_destroy (xmms_xform_t *decoder);
+static gint64 xmms_kate_seek (xmms_xform_t *xform, gint64 samples, xmms_xform_seek_mode_t whence, xmms_error_t *err);
+static gboolean xmms_kate_get_lyrics (xmms_xform_t *xform, xmms_error_t *err);
+
+static double process_kate(xmms_xform_t *xform, const char *ptr, size_t bytes);
+static void add_lyrics_event(xmms_xform_t *xform, const char *text, double t);
+static void clear_lyrics_events(xmms_xform_t *xform);
+static char *get_next_lyrics_event(xmms_xform_t *xform, double t);
+static void set_current_lyrics(xmms_xform_t *xform, const char *text);
+static gpointer lyrics_thread (gpointer arg);
+
+/*
+ * Plugin header
+ */
+
+XMMS_XFORM_PLUGIN ("kate",
+                   "Kate Decoder",
+                   XMMS_VERSION,
+                   "Ogg/Kate lyrics decoder",
+                   xmms_kate_plugin_setup);
+
+static gboolean
+xmms_kate_plugin_setup (xmms_xform_plugin_t *xform_plugin)
+{
+    xmms_xform_methods_t methods;
+
+    XMMS_XFORM_METHODS_INIT (methods);
+    methods.init = &xmms_kate_init;
+    methods.destroy = &xmms_kate_destroy;
+    methods.read = &xmms_kate_read;
+    methods.seek = &xmms_kate_seek;
+    methods.lyrics = &xmms_kate_get_lyrics;
+
+    xmms_xform_plugin_methods_set (xform_plugin, &methods);
+
+    xmms_xform_plugin_config_property_register (xform_plugin, "all-kate-streams",
+                                                "0", NULL, NULL);
+    xmms_xform_plugin_indata_add (xform_plugin,
+                                  XMMS_STREAM_TYPE_MIMETYPE,
+                                  "application/ogg",
+                                  XMMS_STREAM_TYPE_PRIORITY,
+                                  XMMS_STREAM_TYPE_PRIORITY_DEFAULT+1,
+                                  NULL);
+
+    /* We can't add magic for the Kate stream itself, for three reasons:
+       - a lyrics stream might be multiplexed with other streams in any number
+         of ways: there could be extra streams between Vorbis and Kate, etc,
+         so the number of places where a Kate stream could be found is large
+       - we would not be able to parse lyrics for chained Ogg streams where
+         the first chain does not contain lyrics
+       - Lyrics might well be multiplexed with FLAC (or another audio codec)
+         rather than Vorbis, so the offset would be different since the size
+         of the FLAC BOS packet isn't the same as the Vorbis one (and old FLAC
+         streams are different still).
+      We can't add magic for just Ogg, since it'll conflict with Vorbis.
+    */
+#if 0
+    /* if there are just Vorbis and Kate streams */
+    xmms_magic_add ("ogg/kate header",
+                    "application/x-ogg-kate",
+                    "0 string OggS", ">4 byte 0",
+                    ">>86 string \x80kate",
+                    NULL);
+
+    /* if there is a Skeleton stream */
+    xmms_magic_add ("ogg/kate header",
+                    "application/x-ogg-kate",
+                    "0 string OggS", ">4 byte 0",
+                    ">>178 string \x80kate",
+                    NULL);
+
+    /* others... */
+#endif
+
+    return TRUE;
+}
+
+static int
+xmms_kate_close (xmms_xform_t *xform)
+{
+    xmms_kate_data_t *data;
+
+    g_return_val_if_fail (xform, -1);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, -1);
+
+    if (data) {
+        if (data->kate_init_state == kis_all) {
+            ogg_stream_clear(&data->kst);
+        }
+        if (data->kate_init_state >= kis_sync) {
+            ogg_sync_reset(&data->ksy);
+        }
+        if (data->kate_init_state == kis_all) {
+            kate_high_decode_clear(&data->k);
+        }
+        data->kate_init_state = kis_sync;
+    }
+    
+    clear_lyrics_events(xform);
+
+    return 0;
+}
+
+static void
+xmms_kate_destroy (xmms_xform_t *xform)
+{
+    xmms_kate_data_t *data;
+
+    g_return_if_fail (xform);
+
+    data = xmms_xform_private_data_get (xform);
+    g_return_if_fail (data);
+
+    data->running = FALSE;
+    if (data->thread) {
+        g_thread_join (data->thread);
+    }
+    g_mutex_free (data->mutex);
+    g_timer_destroy (data->read_timer);
+
+    xmms_ipc_signal_unregister (XMMS_IPC_SIGNAL_LYRICS);
+
+    xmms_kate_close(xform);
+
+    g_free (data);
+}
+
+static gboolean
+xmms_kate_init (xmms_xform_t *xform)
+{
+    xmms_kate_data_t *data;
+    GError *error = NULL;
+
+    g_return_val_if_fail (xform, FALSE);
+
+    data = g_new0 (xmms_kate_data_t, 1),
+
+    ogg_sync_init(&data->ksy);
+    data->kate_init_state = kis_sync;
+    data->num_lyrics_events = 0;
+    data->lyrics_events = NULL;
+    data->mutex = g_mutex_new ();
+    data->thread = NULL;
+    data->running = TRUE;
+    data->current_lyrics = NULL;
+    data->read_timer = g_timer_new ();
+    data->time_between_reads = 0.0;
+    data->last_read_start_time = 0.0;
+
+    xmms_ipc_signal_register (XMMS_OBJECT (xform),
+                              XMMS_IPC_SIGNAL_LYRICS);
+
+    xmms_xform_private_data_set (xform, data);
+
+    data->thread = g_thread_create (&lyrics_thread, xform, TRUE, &error);
+    if (data->thread) {
+        g_thread_set_priority (data->thread, G_THREAD_PRIORITY_LOW);
+    }
+
+    xmms_xform_outdata_type_add (xform,
+                                 XMMS_STREAM_TYPE_MIMETYPE,
+                                 "application/ogg",
+                                 XMMS_STREAM_TYPE_END);
+
+    return TRUE;
+}
+
+static gint
+xmms_kate_read (xmms_xform_t *xform, gpointer buf, gint len,
+                xmms_error_t *err)
+{
+    gint ret;
+    xmms_kate_data_t *data;
+    const gint chunk_size = 1024; /* the smaller, the greater the approximation */
+    gint read = 0;
+    char *chunk = buf;
+    double lyrics_time;
+    gint remaining_len = len;
+    gboolean lyrics_found = FALSE;
+
+    g_return_val_if_fail (xform, -1);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, -1);
+
+    data->time_between_reads = g_timer_elapsed(data->read_timer, NULL);
+    g_timer_reset (data->read_timer);
+
+    /* read in smaller chunks - see xmms_kate_get_now for details */
+    while (remaining_len > 0) {
+        gint size = remaining_len > chunk_size ? chunk_size : remaining_len;
+        ret = xmms_xform_read (xform, chunk, size, err);
+        if (ret < 0)
+            return ret;
+
+        lyrics_time = process_kate(xform, chunk, ret);
+        if (lyrics_time >= 0.0) {
+            double ratio = read / (double)len;
+            double approx_start_time = lyrics_time - ratio * data->time_between_reads;
+            /* take the earliest */
+            if (!lyrics_found || approx_start_time < data->last_read_start_time)
+                data->last_read_start_time = approx_start_time;
+            lyrics_found = TRUE;
+        }
+
+        remaining_len -= ret;
+        chunk += ret;
+        read += ret;
+        if (ret < size) /* short read - should we break, or try to continue ? */
+            break;
+    }
+
+    /* if we did not find lyrics, we just set the buffer start time to the previous one plus the
+       time between reads - this should work OK if there are not too many time fluctuations, but
+       will miss pauses, etc */
+    if (!lyrics_found) {
+        data->last_read_start_time += data->time_between_reads;
+    }
+
+    return read;
+}
+
+static void
+reset_timing (xmms_kate_data_t *data)
+{
+    g_return_if_fail (data);
+
+    g_timer_reset (data->read_timer);
+    data->time_between_reads = 0.0;
+    data->last_read_start_time = 0.0;
+}
+
+static gint64
+xmms_kate_seek (xmms_xform_t *xform, gint64 offset,
+                xmms_xform_seek_mode_t whence, xmms_error_t *err)
+{
+    xmms_kate_data_t *data;
+
+    g_return_val_if_fail (xform, -1);
+
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, -1);
+
+    if (data->kate_init_state >= kis_sync) {
+        ogg_sync_reset(&data->ksy);
+    }
+
+    g_mutex_lock (data->mutex);
+    clear_lyrics_events(xform);
+    reset_timing(data);
+    g_mutex_unlock (data->mutex);
+
+    return xmms_xform_seek (xform, offset, whence, err);
+}
+
+static gboolean
+is_kate_bos(ogg_page *og)
+{
+    ogg_stream_state os;
+    ogg_packet op;
+    gboolean kate_bos = FALSE;
+
+    if (!ogg_page_bos(og)) return FALSE;
+    ogg_stream_init(&os, ogg_page_serialno (og));
+    ogg_stream_pagein(&os, og);
+    if (ogg_stream_packetpeek(&os, &op) > 0) {
+        if (op.bytes>=8 && !memcmp(op.packet,"\200kate\0\0\0",8))
+            kate_bos = TRUE;
+        ogg_stream_clear(&os);
+    }
+    return kate_bos;
+}
+
+static void
+reset_kate(xmms_xform_t *xform)
+{
+    xmms_kate_data_t *data;
+
+    data = xmms_xform_private_data_get (xform);
+    g_return_if_fail (data);
+
+    if (data->kate_init_state == kis_all) {
+        ogg_stream_clear(&data->kst);
+        kate_high_decode_clear(&data->k);
+    }
+
+    if (data->kate_init_state >= kis_sync) {
+        data->kate_init_state = kis_sync;
+    }
+
+    g_mutex_lock (data->mutex);
+    clear_lyrics_events(xform);
+    reset_timing(data);
+    g_mutex_unlock (data->mutex);
+}
+
+static double
+process_kate(xmms_xform_t *xform, const char *ptr, size_t sz)
+{
+    int ret;
+    ogg_page og;
+    ogg_packet op;
+    char *buffer;
+    xmms_kate_data_t *data;
+    double lyrics_time = -1.0;
+
+    g_return_val_if_fail (xform, -1.0);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, -1.0);
+
+    if (data->kate_init_state < kis_sync)
+        return -1.0;
+
+    buffer = ogg_sync_buffer(&data->ksy, sz);
+    if (buffer) {
+        memcpy(buffer, ptr, sz);
+        ogg_sync_wrote(&data->ksy, sz);
+    }
+
+    while (ogg_sync_pageout(&data->ksy, &og) > 0) {
+        /* if we get a Kate BOS, reset */
+        if (is_kate_bos(&og)) {
+            XMMS_DBG("found Kate BOS - init for %08x", ogg_page_serialno (&og));
+            reset_kate(xform);
+            ogg_stream_init(&data->kst, ogg_page_serialno (&og));
+            ogg_stream_pagein(&data->kst, &og);
+            ret = kate_high_decode_init(&data->k);
+            if (ret < 0) {
+                xmms_log_error("kate_high_decode_init failed: %d", ret);
+                ogg_stream_clear(&data->kst);
+                data->kate_init_state = kis_sync;
+            }
+            else {
+              if (ogg_stream_packetout(&data->kst, &op) > 0) {
+                kate_packet kp;
+                kate_packet_wrap(&kp, op.bytes, op.packet);
+                ret = kate_high_decode_packetin(&data->k, &kp, NULL);
+                if (ret < 0) {
+                    xmms_log_error("kate_high_decode_packetin failed: %d", ret);
+                }
+                else {
+                  const xmms_config_property_t *val = xmms_xform_config_lookup (xform, "all-kate-streams");
+                  gint all = val && xmms_config_property_get_int (val);
+                  if (!all && strcmp(data->k.ki->category, "lyrics")) {
+                    XMMS_DBG("Kate stream has category '%s', ignored", data->k.ki->category);
+                    ogg_stream_clear(&data->kst);
+                    data->kate_init_state = kis_sync;
+                  }
+                  else {
+                      data->kate_init_state = kis_all;
+                  }
+                }
+              }
+              else {
+                xmms_log_error("Initial Kate page did not contain the BOS packet\n");
+                ogg_stream_clear(&data->kst);
+                data->kate_init_state = kis_sync;
+              }
+            }
+        }
+        else if (data->kate_init_state == kis_all) {
+           ogg_stream_pagein(&data->kst, &og);
+
+            while (ogg_stream_packetout(&data->kst, &op) > 0) {
+                const kate_event *ev = NULL;
+                kate_packet kp;
+                kate_packet_wrap(&kp, op.bytes, op.packet);
+                ret = kate_high_decode_packetin(&data->k, &kp, &ev);
+                if (ret < 0) {
+                    xmms_log_error("kate_high_decode_packetin failed: %d\n", ret);
+                }
+                else {
+                    if (ev) {
+                        g_mutex_lock (data->mutex);
+                        add_lyrics_event (xform, ev->text, ev->start_time);
+                        add_lyrics_event (xform, "", ev->end_time);
+                        g_mutex_unlock (data->mutex);
+
+                        /* remember the time of the first lyrics, if any, in (or around) this buffer */
+                        if (lyrics_time < 0)
+                            lyrics_time = ev->start_time;
+                    }
+                    if (ret > 0) {
+                        /* eos */
+                        reset_kate (xform);
+                    }
+                }
+            }
+        }
+    }
+    return lyrics_time;
+}
+
+static void
+add_lyrics_event(xmms_xform_t *xform, const char *text, double t)
+{
+    xmms_kate_data_t *data;
+    lyrics_event *new_lyrics_events;
+
+    g_return_if_fail (xform);
+    data = xmms_xform_private_data_get (xform);
+    g_return_if_fail (data);
+
+    g_return_if_fail (text);
+    g_return_if_fail (t >= 0.0);
+
+    /* lyrics are sent as signals, and it seems that sending two signals very
+       close together will drop the second one on the floor. Since lyrics typically
+       start just when the previous one ends, we'll check whether a lyrics line is
+       added at the same time or slightly after the last one, and replace it if so */
+    if (data->num_lyrics_events>0 && t-data->lyrics_events[data->num_lyrics_events-1].t<0.1) {
+        g_free(data->lyrics_events[data->num_lyrics_events-1].text);
+        --data->num_lyrics_events;
+    }
+    else {
+        new_lyrics_events = (lyrics_event*)g_realloc(data->lyrics_events, (data->num_lyrics_events+1)*sizeof(lyrics_event));
+        if (!new_lyrics_events) {
+            /* failed to allocate */
+            return;
+        }
+        data->lyrics_events = new_lyrics_events;
+    }
+
+    data->lyrics_events[data->num_lyrics_events].text = g_strdup(text);
+    data->lyrics_events[data->num_lyrics_events].t = t;
+
+    ++data->num_lyrics_events;
+}
+
+static char *
+get_next_lyrics_event(xmms_xform_t *xform, double t)
+{
+    xmms_kate_data_t *data;
+    char *text;
+
+    g_return_val_if_fail (xform, NULL);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, NULL);
+
+    if (data->num_lyrics_events == 0) return NULL;
+    if (data->lyrics_events[0].t > t) return NULL;
+
+    text = data->lyrics_events[0].text;
+    --data->num_lyrics_events;
+    memmove(data->lyrics_events, data->lyrics_events+1, sizeof(lyrics_event)*data->num_lyrics_events);
+
+    return text; /* caller owns and must free */
+}
+
+/* called with mutex held, or after the lyrics thread has died */
+static void
+clear_lyrics_events(xmms_xform_t *xform)
+{
+    xmms_kate_data_t *data;
+    size_t n;
+
+    g_return_if_fail (xform);
+    data = xmms_xform_private_data_get (xform);
+    g_return_if_fail (data);
+
+    for (n=0; n<data->num_lyrics_events; ++n) {
+        /* NULL is fine to free */
+        g_free(data->lyrics_events[n].text);
+    }
+    g_free(data->lyrics_events);
+    data->lyrics_events = NULL;
+    data->num_lyrics_events = 0;
+
+    set_current_lyrics(xform, "");
+}
+
+static void
+set_current_lyrics(xmms_xform_t *xform, const char *text)
+{
+    xmms_kate_data_t *data;
+
+    g_return_if_fail (xform);
+    data = xmms_xform_private_data_get (xform);
+    g_return_if_fail (data);
+
+    if (data->current_lyrics)
+        g_free(data->current_lyrics);
+    data->current_lyrics = text ? g_strdup(text) : NULL;
+
+    xmms_object_emit_f (XMMS_OBJECT (xform),
+                        XMMS_IPC_SIGNAL_LYRICS,
+                        XMMS_OBJECT_CMD_ARG_STRING,
+                        text);
+}
+
+static gboolean
+xmms_kate_get_lyrics (xmms_xform_t *xform, xmms_error_t *err)
+{
+    xmms_kate_data_t *data;
+
+    g_return_val_if_fail (xform, FALSE);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (xform, FALSE);
+
+    g_mutex_lock (data->mutex);
+    xmms_xform_set_lyrics (xform, data->current_lyrics);
+    g_mutex_unlock (data->mutex);
+
+    return TRUE;
+}
+
+static double
+xmms_kate_get_now (xmms_kate_data_t *data)
+{
+    double latency = 0.0;
+
+    g_return_val_if_fail (data, 0.0);
+
+    /* And this is where it sucks: in order to signal lyrics at the correct time,
+       we need to know where we are in playback, so we can compare this time to
+       the start time for the next lyrics line. However, we don't know where we
+       are in playback, as we can't get that information cleanly.
+       A possible approach to mitigate this could be timing the delay between
+       reads and interpolating blindly since Vorbis packets, which we are likely
+       to be multiplexed with, are of relatively constant size, but this would
+       only work once we get a Kate packet (as those are the ones we can know
+       the timestamp of with certainty), and would cause trouble with pause as
+       we get no notification of that either, so we can only deduce after the
+       fact is the next read doesn't happen within a given time window. */
+
+    /* Ideally, I'd call xmms_output_playtime, but it's not for plugins, and
+       I don't have the output plugin handy anyway. */
+
+    /* Alternatively, if the Vorbis plugin could tell me about its DSP time,
+       I could use that and not be much in advance - this is what I do in the
+       version that's within the Vorbis plugin. However, the lyrics might be
+       multiplexed with another stream type than Vorbis. */
+
+    /* So, for now, we return FLT_MAX so lyrics will get signalled as soon as
+       they are read. If the read buffer is not too large, timing's not too
+       far off, but larger buffers will cause lyrics to appear earlier */
+
+    /* This also means that if there are several lyrics line within a single
+       read's worth of Ogg data, they'll be signalled at the same time, which
+       in practice means only the last one will be visible */
+
+    /* No I don't do that anymore actually, "better" solution below
+    return FLT_MAX;
+    */
+
+    /* Another solution, a bit hairy, but works:
+  
+       each time we get a read request: remember delay since last read, and start a timer
+       on reset/seek: clear lyrics, clear timer
+       split reads into smaller ones, and check each of them to see if we get a kate packet
+       once we get a kate packet, we know its timestamp, and we know where (approx) in the
+         large read it is, since we broke it up (so we know in which part it is)
+            -> so we deduce (approx) the start time of the large read
+            -> get_now: start time of the previous large read, plus elapsed time since
+               last read. Ain't pretty, but it works OK in practice.
+       the output will have some latency, but we don't know it, we just hope it's too too
+         large or we'll be off (too early)
+
+       BTW, this methods relies on the Kate packets being multiplexed optimally with
+       the audio - this is usually the case, but Ogg allows non optimal multiplexing.
+       The farther away from optimal muxing, the more the timing will be off.
+    */
+
+    /* Half a second's worth - just happens to look alright, though it might well
+       depend on the output plugin, sound hardware, phase of the moon, etc.
+       Are you feeling nauseous yet ? Gimme a xmms_get_output_playtime API :) */
+    latency = 0.5;
+
+    return data->last_read_start_time + g_timer_elapsed (data->read_timer, NULL) - latency;
+}
+
+static gpointer
+lyrics_thread (gpointer arg)
+{
+    xmms_xform_t *xform;
+    xmms_kate_data_t *data;
+    double t;
+
+    xform = (xmms_xform_t *)arg;
+    g_return_val_if_fail (xform, NULL);
+    data = xmms_xform_private_data_get (xform);
+    g_return_val_if_fail (data, NULL);
+
+    /* loop till told to end, popping next lyrics at the right time */
+    while (data->running) {
+        g_mutex_lock (data->mutex);
+        t = xmms_kate_get_now (data);
+        char *lyrics = get_next_lyrics_event (xform, t);
+        if (lyrics) {
+            set_current_lyrics (xform, lyrics);
+            g_free (lyrics);
+        }
+        g_mutex_unlock (data->mutex);
+    }
+    return NULL;
+}
+
diff --git a/src/plugins/kate/wscript b/src/plugins/kate/wscript
new file mode 100644
index 0000000..cc33dff
--- /dev/null
+++ b/src/plugins/kate/wscript
@@ -0,0 +1,7 @@
+from waftools.plugin import plugin
+
+def plugin_configure(conf):
+    return (conf.check_pkg('kate', destvar='kate') and
+            conf.check_pkg('ogg', destvar='ogg'))
+
+configure, build = plugin('kate', needs_lib=True, configure=plugin_configure, source='kate.c', extra_libs=['ogg'])
diff --git a/src/xmms/output.c b/src/xmms/output.c
index 0c37945..5e341f0 100644
--- a/src/xmms/output.c
+++ b/src/xmms/output.c
@@ -55,6 +55,7 @@ static void xmms_output_seekms_rel (xmms_output_t *output, gint32 ms, xmms_error
 static void xmms_output_seeksamples (xmms_output_t *output, guint32 samples, xmms_error_t *error);
 static void xmms_output_seeksamples_rel (xmms_output_t *output, gint32 samples, xmms_error_t *error);
 static guint xmms_output_status (xmms_output_t *output, xmms_error_t *error);
+static gchar *xmms_output_lyrics_get (xmms_output_t *output, xmms_error_t *error);
 
 typedef enum xmms_output_filler_state_E {
 	FILLER_STOP,
@@ -90,6 +91,7 @@ XMMS_CMD_DEFINE (output_status, xmms_output_status, xmms_output_t *, UINT32, NON
 XMMS_CMD_DEFINE (currentid, xmms_output_current_id, xmms_output_t *, UINT32, NONE, NONE);
 XMMS_CMD_DEFINE (volume_set, xmms_output_volume_set, xmms_output_t *, NONE, STRING, UINT32);
 XMMS_CMD_DEFINE (volume_get, xmms_output_volume_get, xmms_output_t *, DICT, NONE, NONE);
+XMMS_CMD_DEFINE (lyrics_get, xmms_output_lyrics_get, xmms_output_t *, STRING, NONE, NONE);
 
 /*
  * Type definitions
@@ -158,6 +160,11 @@ struct xmms_output_St {
 
 	GThread *monitor_volume_thread;
 	gboolean monitor_volume_running;
+
+	/**
+	 * Current lyrics, might be NULL if no xform supplies lyrics.
+	 */
+	gchar *current_lyrics;
 };
 
 /** @} */
@@ -285,6 +292,12 @@ song_changed (void *data)
 	if (arg->flush)
 		xmms_output_flush (arg->output);
 
+	/* discard any lyrics we might have had */
+	if (arg->output->current_lyrics) {
+		g_free(arg->output->current_lyrics);
+		arg->output->current_lyrics = NULL;
+	}
+
 	xmms_object_emit_f (XMMS_OBJECT (arg->output),
 	                    XMMS_IPC_SIGNAL_OUTPUT_CURRENTID,
 	                    XMMS_OBJECT_CMD_ARG_UINT32,
@@ -337,6 +350,36 @@ xmms_output_filler_seek_state (xmms_output_t *output, guint32 samples)
 	g_mutex_unlock (output->filler_mutex);
 }
 
+static void
+xmms_output_filler_update_lyrics (xmms_output_t *output, xmms_xform_t *chain)
+{
+	gchar *lyrics = NULL;
+	xmms_error_t err;
+
+	g_return_if_fail (output != NULL);
+
+	/* starting chain might be NULL */
+	if (chain) {
+		xmms_error_reset (&err);
+		lyrics = xmms_xform_lyrics (chain, &err);
+		if (lyrics) {
+			/* we've found lyrics, replace if different */
+			int same = (output->current_lyrics!=NULL) && !strcmp(output->current_lyrics, lyrics);
+			if (!same) {
+				if (output->current_lyrics)
+					g_free(output->current_lyrics);
+				output->current_lyrics = g_strdup(lyrics);
+			}
+		}
+		else {
+			if (output->current_lyrics) {
+				g_free(output->current_lyrics);
+				output->current_lyrics = NULL;
+			}
+		}
+	}
+}
+
 static void *
 xmms_output_filler (void *arg)
 {
@@ -482,6 +525,8 @@ xmms_output_filler (void *arg)
 			}
 		}
 
+		/* walk the chain of xforms and see if we have lyrics */
+		xmms_output_filler_update_lyrics (output, chain);
 	}
 	g_mutex_unlock (output->filler_mutex);
 	return NULL;
@@ -742,6 +787,25 @@ xmms_output_playtime (xmms_output_t *output, xmms_error_t *error)
 
 
 /**
+ * Get the current lyrics (NULL if no lyrics).
+ */
+gchar*
+xmms_output_lyrics_get (xmms_output_t *output, xmms_error_t *error)
+{
+	gchar *lyrics = NULL;
+
+	g_return_val_if_fail (output, NULL);
+
+	g_mutex_lock (output->filler_mutex);
+	if (output->current_lyrics)
+		lyrics = g_strdup(output->current_lyrics);
+	g_mutex_unlock (output->filler_mutex);
+
+	return lyrics;
+}
+
+
+/**
  * @internal
  */
 
@@ -814,6 +878,9 @@ xmms_output_destroy (xmms_object_t *object)
 	g_cond_free (output->filler_state_cond);
 	xmms_ringbuf_destroy (output->filler_buffer);
 
+	if (output->current_lyrics)
+		g_free(output->current_lyrics);
+
 	xmms_ipc_broadcast_unregister ( XMMS_IPC_SIGNAL_OUTPUT_VOLUME_CHANGED);
 	xmms_ipc_broadcast_unregister ( XMMS_IPC_SIGNAL_PLAYBACK_STATUS);
 	xmms_ipc_broadcast_unregister ( XMMS_IPC_SIGNAL_OUTPUT_CURRENTID);
@@ -949,6 +1016,9 @@ xmms_output_new (xmms_output_plugin_t *plugin, xmms_playlist_t *playlist)
 	xmms_object_cmd_add (XMMS_OBJECT (output),
 	                     XMMS_IPC_CMD_VOLUME_GET,
 	                     XMMS_CMD_FUNC (volume_get));
+	xmms_object_cmd_add (XMMS_OBJECT (output),
+	                     XMMS_IPC_CMD_LYRICS,
+	                     XMMS_CMD_FUNC (lyrics_get));
 
 	output->status = XMMS_PLAYBACK_STATUS_STOP;
 
diff --git a/src/xmms/xform.c b/src/xmms/xform.c
index cb991ab..5c1c214 100644
--- a/src/xmms/xform.c
+++ b/src/xmms/xform.c
@@ -67,6 +67,8 @@ struct xmms_xform_St {
 	GTree *browse_dict;
 	gint browse_index;
 
+	gchar *current_lyrics;
+
 	/** used for line reading */
 	struct {
 		gchar buf[XMMS_XFORM_MAX_LINE_SIZE];
@@ -309,6 +311,32 @@ xmms_xform_browse (xmms_xform_object_t *obj, const gchar *url,
 	return list;
 }
 
+void
+xmms_xform_set_lyrics (xmms_xform_t *xform, const gchar *lyrics)
+{
+	if (xform->current_lyrics)
+		g_free(xform->current_lyrics);
+	xform->current_lyrics = lyrics ? g_strdup(lyrics) : NULL;
+}
+
+gchar *
+xmms_xform_lyrics (xmms_xform_t *xform, xmms_error_t *error)
+{
+	if (xform->plugin && xform->plugin->methods.lyrics) {
+		if (!xform->plugin->methods.lyrics (xform, error)) {
+			if (xform->current_lyrics)
+				g_free (xform->current_lyrics);
+			xform->current_lyrics = NULL;
+		}
+	} else {
+		/* no lyrics available, try previous */
+		if (xform->prev)
+			return xmms_xform_lyrics (xform->prev, error);
+	}
+
+	return xform->current_lyrics;
+}
+
 XMMS_CMD_DEFINE (browse, xmms_xform_browse, xmms_xform_object_t *,
                  LIST, STRING, NONE);
 
@@ -354,6 +382,8 @@ xmms_xform_destroy (xmms_object_t *object)
 
 	g_free (xform->buffer);
 
+	g_free (xform->current_lyrics);
+
 	xmms_object_unref (xform->out_type);
 	xmms_object_unref (xform->plugin);
 
@@ -403,6 +433,8 @@ xmms_xform_new (xmms_xform_plugin_t *plugin, xmms_xform_t *prev,
 	xform->buffer = g_malloc (READ_CHUNK);
 	xform->buffersize = READ_CHUNK;
 
+	xform->current_lyrics = NULL;
+
 	return xform;
 }
 
@@ -1237,6 +1269,7 @@ xmms_xform_plugin_supports (xmms_xform_plugin_t *plugin, xmms_stream_type_t *st,
 }
 
 typedef struct match_state_St {
+	const xmms_xform_plugin_t *prev;
 	xmms_xform_plugin_t *match;
 	xmms_stream_type_t *out_type;
 	gint priority;
@@ -1256,6 +1289,11 @@ xmms_xform_match (xmms_plugin_t *_plugin, gpointer user_data)
 		return TRUE;
 	}
 
+        if (state->prev == plugin) {
+		XMMS_DBG ("Plugin '%s' was selected last round, ignoring\n", xmms_plugin_shortname_get (_plugin));
+		return TRUE;
+        }
+
 	XMMS_DBG ("Trying plugin '%s'", xmms_plugin_shortname_get (_plugin));
 	if (xmms_xform_plugin_supports (plugin, state->out_type, &priority)) {
 		XMMS_DBG ("Plugin '%s' matched (priority %d)",
@@ -1286,6 +1324,7 @@ xmms_xform_find (xmms_xform_t *prev, xmms_medialib_entry_t entry,
 	state.out_type = prev->out_type;
 	state.match = NULL;
 	state.priority = -1;
+        state.prev = prev->plugin;
 
 	xmms_plugin_foreach (XMMS_PLUGIN_TYPE_XFORM, xmms_xform_match, &state);
 
