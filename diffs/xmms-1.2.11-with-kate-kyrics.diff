diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/Makefile.am xmms-1.2.11/Input/vorbis/Makefile.am
--- xmms-1.2.11-original/Input/vorbis/Makefile.am	2004-04-04 09:51:20.000000000 +0100
+++ xmms-1.2.11/Input/vorbis/Makefile.am	2008-07-15 19:29:10.000000000 +0100
@@ -6,9 +6,9 @@
 
 libdir = $(plugindir)/$(INPUT_PLUGIN_DIR)
 
-INCLUDES = @GTK_CFLAGS@ @OGG_CFLAGS@ @VORBIS_CFLAGS@ -I$(top_builddir)/intl -I$(top_srcdir)
+INCLUDES = @GTK_CFLAGS@ @OGG_CFLAGS@ @VORBIS_CFLAGS@ @KATE_CFLAGS@ -I$(top_builddir)/intl -I$(top_srcdir)
 libvorbis_la_LDFLAGS = @PLUGIN_LDFLAGS@
-libvorbis_la_LIBADD = @GTK_LIBS@ @PTHREAD_LIBS@ @VORBIS_LIBS@ @OGG_LIBS@ @VORBISFILE_LIBS@ \
+libvorbis_la_LIBADD = @GTK_LIBS@ @PTHREAD_LIBS@ @VORBIS_LIBS@ @KATE_LIBS@ @OGG_LIBS@ @VORBISFILE_LIBS@ \
 @LTLIBICONV@
 
 libvorbis_la_SOURCES = \
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/configure.c xmms-1.2.11/Input/vorbis/configure.c
--- xmms-1.2.11-original/Input/vorbis/configure.c	2005-05-15 01:01:20.000000000 +0100
+++ xmms-1.2.11/Input/vorbis/configure.c	2008-10-25 20:24:40.000000000 +0100
@@ -29,6 +29,8 @@
 static GtkWidget *streaming_save_dirbrowser, *streaming_save_hbox;
 static GtkWidget *title_tag_override, *title_tag_box, *title_tag_entry, *title_desc;
 static GtkWidget *rg_switch, *rg_clip_switch, *rg_booster_switch, *rg_track_gain;
+static GtkWidget *kate_lyrics, *kate_all_streams;
+static GtkWidget *kate_offset_spin;
 
 vorbis_config_t vorbis_cfg;
 
@@ -80,6 +82,9 @@
 	else
 		vorbis_cfg.replaygain_mode = REPLAYGAIN_MODE_ALBUM;
 
+	vorbis_cfg.show_kate_lyrics = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(kate_lyrics));
+	vorbis_cfg.show_all_kate_streams = gtk_toggle_button_get_active(GTK_TOGGLE_BUTTON(kate_all_streams));
+	vorbis_cfg.kate_offset = gtk_spin_button_get_value_as_int(GTK_SPIN_BUTTON(kate_offset_spin));
 	
 	cfg = xmms_cfg_open_default_file();
 
@@ -117,6 +122,9 @@
 	xmms_cfg_write_boolean(cfg, "vorbis", "use_replaygain", vorbis_cfg.use_replaygain);
 	xmms_cfg_write_int(cfg, "vorbis", "replaygain_mode", vorbis_cfg.replaygain_mode);
 	xmms_cfg_write_boolean(cfg, "vorbis", "use_booster", vorbis_cfg.use_booster);
+	xmms_cfg_write_boolean(cfg, "vorbis", "show_kate_lyrics", vorbis_cfg.show_kate_lyrics);
+	xmms_cfg_write_boolean(cfg, "vorbis", "show_all_kate_streams", vorbis_cfg.show_all_kate_streams);
+	xmms_cfg_write_int(cfg, "vorbis", "kate_offset", vorbis_cfg.kate_offset);
 	xmms_cfg_write_default_file(cfg);
 	xmms_cfg_free(cfg);
 	gtk_widget_destroy(vorbis_configurewin);
@@ -211,6 +219,11 @@
 	GtkWidget *bbox, *ok, *cancel;
 	GtkWidget *rg_type_frame, *rg_type_vbox, *rg_album_gain;
 	GtkObject *streaming_size_adj, *streaming_pre_adj;
+        GtkWidget *kate_vbox, *kate_frame;
+        GtkWidget *kate_offset_frame;
+        GtkWidget *kate_offset_hbox;
+	GtkObject *kate_offset_adj;
+        GtkWidget *kate_offset_label;
 
 	char *temp;
 
@@ -439,6 +452,40 @@
 
 	gtk_notebook_append_page(GTK_NOTEBOOK(notebook), rg_frame, gtk_label_new(_("ReplayGain")));
 
+	/* Lyrics.. */
+	
+	kate_frame = gtk_frame_new(_("Kate lyrics:"));
+	gtk_container_border_width(GTK_CONTAINER(kate_frame), 5);
+	
+	kate_vbox = gtk_vbox_new(FALSE, 10);
+	gtk_container_border_width(GTK_CONTAINER(kate_vbox), 5);
+	gtk_container_add(GTK_CONTAINER(kate_frame), kate_vbox);
+	
+	kate_lyrics = gtk_check_button_new_with_label(_("Show embedded Kate lyrics"));
+	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(kate_lyrics), vorbis_cfg.show_kate_lyrics);
+	gtk_box_pack_start(GTK_BOX(kate_vbox), kate_lyrics, FALSE, FALSE, 0);
+	
+	kate_all_streams = gtk_check_button_new_with_label(_("Show all Kate streams"));
+	gtk_toggle_button_set_active(GTK_TOGGLE_BUTTON(kate_all_streams), vorbis_cfg.show_all_kate_streams);
+	gtk_box_pack_start(GTK_BOX(kate_vbox), kate_all_streams, FALSE, FALSE, 0);
+	
+	kate_offset_frame = gtk_frame_new(_("Timing"));
+	gtk_container_set_border_width(GTK_CONTAINER(kate_offset_frame), 5);
+	gtk_box_pack_start(GTK_BOX(kate_vbox), kate_offset_frame, FALSE, FALSE, 0);
+
+	kate_offset_hbox = gtk_hbox_new(TRUE, 5);
+	gtk_container_set_border_width(GTK_CONTAINER(kate_offset_hbox), 5);
+	gtk_container_add(GTK_CONTAINER(kate_offset_frame), kate_offset_hbox);
+
+	kate_offset_label = gtk_label_new(_("Offset (ms):"));
+	gtk_box_pack_start(GTK_BOX(kate_offset_hbox), kate_offset_label, FALSE, FALSE, 0);
+	kate_offset_adj = gtk_adjustment_new(vorbis_cfg.kate_offset, -1000, +1000, 10, 10, 10);
+	kate_offset_spin = gtk_spin_button_new(GTK_ADJUSTMENT(kate_offset_adj), 8, 0);
+	gtk_widget_set_usize(kate_offset_spin, 60, -1);
+	gtk_box_pack_start(GTK_BOX(kate_offset_hbox), kate_offset_spin, FALSE, FALSE, 0);
+
+	gtk_notebook_append_page(GTK_NOTEBOOK(notebook), kate_frame, gtk_label_new(_("Lyrics")));
+
 	/* Buttons */
 
 	bbox = gtk_hbutton_box_new();
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/fileinfo.c xmms-1.2.11/Input/vorbis/fileinfo.c
--- xmms-1.2.11-original/Input/vorbis/fileinfo.c	2005-05-15 01:01:20.000000000 +0100
+++ xmms-1.2.11/Input/vorbis/fileinfo.c	2008-10-21 20:36:55.000000000 +0100
@@ -33,6 +33,9 @@
 #include <ogg/ogg.h>
 #include <vorbis/codec.h>
 #include <vorbis/vorbisfile.h>
+#ifdef HAVE_KATE
+#include <kate/kate.h>
+#endif
 
 #include "libxmms/util.h"
 #include "libxmms/charset.h"
@@ -72,6 +75,10 @@
 static GtkWidget *replaygain_label, *audiophilegain_label, *peak_label;
 static GtkWidget *filename_entry, *tag_frame, *vendor_label;
 
+static GtkWidget *knotfound_label;
+static GtkWidget *klanguage_label, *kcategory_label;
+static GtkWidget *kvendor_label;
+
 
 /* From mpg123.c, as no standardized Ogg Vorbis genres exists. */
 static const gchar *vorbis_genres[] =
@@ -432,6 +439,72 @@
 		gtk_widget_destroy(w);
 }
 
+#ifdef HAVE_KATE
+static gboolean scan_kate_info(FILE *f, char **language, char **category, char **vendor)
+{
+        long pos;
+        char *ptr;
+        ogg_sync_state oy;
+        ogg_stream_state os;
+        ogg_page og;
+        ogg_packet op;
+        gboolean found_kate = FALSE;
+        kate_state k;
+
+        /* init to "not found" */
+        *language = NULL;
+        *category = NULL;
+        *vendor = NULL;
+
+        /* remember where we started */
+        pos = ftell(f);
+
+        ogg_sync_init(&oy);
+        ptr = ogg_sync_buffer(&oy, 65536);
+        if (ptr) {
+                /* read enough data (easily enough to jump over the vorbis codebooks and find all kate headers) */
+                size_t sz = fread(ptr, 1, 65536, f);
+                ogg_sync_wrote(&oy, sz);
+                while (ogg_sync_pageout(&oy, &og) > 0) {
+                        if (ogg_page_bos(&og) && !found_kate)
+                                ogg_stream_init(&os, ogg_page_serialno (&og));
+                        ogg_stream_pagein(&os, &og);
+                        while (ogg_stream_packetout(&os, &op) > 0) {
+                                kate_packet kp;
+                                kate_packet_wrap(&kp, op.bytes, op.packet);
+                                if (op.bytes >= 8 && !memcmp(op.packet, "\200kate\0\0\0", 8)) {
+                                        /* it is a Kate BOS header */
+                                        found_kate = TRUE;
+                                        kate_high_decode_init(&k);
+                                }
+                                if (found_kate) {
+                                                kate_high_decode_packetin(&k, &kp, NULL);
+                                }
+                        }
+                        if (!found_kate)
+                                ogg_stream_clear(&os);
+                }
+        }
+        ogg_sync_clear(&oy);
+
+        if (found_kate) {
+                const kate_comment *kc;
+                *category = g_strdup(k.ki->category);
+                *language = g_strdup(k.ki->language);
+#if (KATE_VERSION_MAJOR*0x10000) + (KATE_VERSION_MINOR*0x100) + KATE_VERSION_PATCH >= 0x000106
+                /* libkate API prior to 0.1.6 doesn't have kate_high_decode_get_comments */
+                kc = kate_high_decode_get_comments(&k);
+                *vendor = g_strdup(kc->vendor);
+#endif
+        }
+
+        /* rewind to where we were */
+        fseek(f, pos, SEEK_SET);
+
+        return found_kate;
+}
+#endif
+
 /***********************************************************************/
 
 void vorbis_file_info_box(char *fn)
@@ -457,7 +530,8 @@
 	if (!window)
 	{
 		GtkWidget *info_frame, *info_box;
-		GtkWidget *hbox, *label, *filename_hbox, *vbox, *left_vbox;
+		GtkWidget *kinfo_frame, *kinfo_box;
+		GtkWidget *hbox, *label, *filename_hbox, *vbox, *left_vbox, *info_vbox;
 		GtkWidget *table, *bbox, *cancel_button;
 		GtkWidget *save_button, *remove_button;
 
@@ -719,8 +793,11 @@
 		GTK_WIDGET_SET_FLAGS(cancel_button, GTK_CAN_DEFAULT);
 		gtk_box_pack_start(GTK_BOX(bbox),cancel_button, TRUE, TRUE, 0);
 
+		info_vbox = gtk_vbox_new(FALSE, 10);
+		gtk_container_add(GTK_CONTAINER(hbox), info_vbox);
+
 		info_frame = gtk_frame_new(_("Ogg Vorbis Info:"));
-		gtk_box_pack_start(GTK_BOX(hbox), info_frame, FALSE, FALSE, 0);
+		gtk_box_pack_start(GTK_BOX(info_vbox), info_frame, FALSE, FALSE, 0);
 
 		info_box = gtk_vbox_new(FALSE, 5);
 		gtk_container_add(GTK_CONTAINER(info_frame), info_box);
@@ -796,6 +873,42 @@
 		gtk_box_pack_start(GTK_BOX(info_box), peak_label, FALSE,
 				   FALSE, 0);
 		
+		kinfo_frame = gtk_frame_new(_("Kate lyrics Info:"));
+		gtk_box_pack_start(GTK_BOX(info_vbox), kinfo_frame, FALSE, FALSE, 0);
+
+		kinfo_box = gtk_vbox_new(FALSE, 5);
+		gtk_container_add(GTK_CONTAINER(kinfo_frame), kinfo_box);
+		gtk_container_set_border_width(GTK_CONTAINER(kinfo_box), 10);
+		gtk_box_set_spacing(GTK_BOX(kinfo_box), 0);
+
+		knotfound_label = gtk_label_new("");
+		gtk_misc_set_alignment(GTK_MISC(knotfound_label), 0, 0);
+		gtk_label_set_justify(GTK_LABEL(knotfound_label),
+				      GTK_JUSTIFY_LEFT);
+		gtk_box_pack_start(GTK_BOX(kinfo_box), knotfound_label, FALSE,
+				   FALSE, 0);
+
+		klanguage_label = gtk_label_new("");
+		gtk_misc_set_alignment(GTK_MISC(klanguage_label), 0, 0);
+		gtk_label_set_justify(GTK_LABEL(klanguage_label),
+				      GTK_JUSTIFY_LEFT);
+		gtk_box_pack_start(GTK_BOX(kinfo_box), klanguage_label, FALSE,
+				   FALSE, 0);
+
+		kcategory_label = gtk_label_new("");
+		gtk_misc_set_alignment(GTK_MISC(kcategory_label), 0, 0);
+		gtk_label_set_justify(GTK_LABEL(kcategory_label),
+				      GTK_JUSTIFY_LEFT);
+		gtk_box_pack_start(GTK_BOX(kinfo_box), kcategory_label, FALSE,
+				   FALSE, 0);
+
+		kvendor_label = gtk_label_new("");
+		gtk_misc_set_alignment(GTK_MISC(kvendor_label), 0, 0);
+		gtk_label_set_justify(GTK_LABEL(kvendor_label),
+				      GTK_JUSTIFY_LEFT);
+		gtk_box_pack_start(GTK_BOX(kinfo_box), kvendor_label, FALSE,
+				   FALSE, 0);
+
 		gtk_widget_show_all(window);
 	} else
 		gdk_window_raise(window->window);
@@ -813,10 +926,55 @@
 	gtk_label_set_text(GTK_LABEL(filesize_label), "");
 	gtk_label_set_text(GTK_LABEL(vendor_label), "");
 
+	gtk_label_set_text(GTK_LABEL(knotfound_label), "");
+	gtk_label_set_text(GTK_LABEL(klanguage_label), "");
+	gtk_label_set_text(GTK_LABEL(kcategory_label), "");
+	gtk_label_set_text(GTK_LABEL(kvendor_label), "");
+
 	if ((fh = fopen(vte.filename, "r")) != NULL)
 	{
+                gboolean kate_found;
+                gchar *kate_language = NULL;
+                gchar *kate_category = NULL;
+                gchar *kate_vendor = NULL;
+                void (*widget_visibility_function)(GtkWidget*);
+
 		pthread_mutex_lock(&vf_mutex);
 
+                /* scan for a Kate BOS header, it should be in the first KB or so */
+#ifdef HAVE_KATE
+                kate_found = scan_kate_info(fh, &kate_language, &kate_category, &kate_vendor);
+                if (kate_found) {
+                        gtk_widget_hide(knotfound_label);
+                        label_set_text(knotfound_label, _("Found"));
+                        if (kate_language) {
+			        label_set_text(klanguage_label, _("Language: %s"), kate_language);
+                                g_free(kate_language);
+                        }
+                        if (kate_category) {
+			        label_set_text(kcategory_label, _("Category: %s"), kate_category);
+                                g_free(kate_category);
+                        }
+                        if (kate_vendor) {
+			        label_set_text(kvendor_label, _("Vendor: %s"), kate_vendor);
+                                g_free(kate_vendor);
+                        }
+                        widget_visibility_function = &gtk_widget_show;
+                }
+                else {
+                        label_set_text(knotfound_label, _("None found"));
+                        gtk_widget_show(knotfound_label);
+                        widget_visibility_function = &gtk_widget_hide;
+                }
+#else
+		label_set_text(knotfound_label, _("[Kate support not compiled in]"));
+                gtk_widget_show(knotfound_label); /* always shown */
+#endif
+
+	        (*widget_visibility_function)(klanguage_label);
+	        (*widget_visibility_function)(kcategory_label);
+	        (*widget_visibility_function)(kvendor_label);
+
 		if (ov_open(fh, &vf, NULL, 0) == 0)
 		{
 			comment = ov_comment(&vf, -1);
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/vcedit.c xmms-1.2.11/Input/vorbis/vcedit.c
--- xmms-1.2.11-original/Input/vorbis/vcedit.c	2001-12-17 22:27:19.000000000 +0000
+++ xmms-1.2.11/Input/vorbis/vcedit.c	2008-10-21 20:38:37.000000000 +0100
@@ -141,6 +141,39 @@
 	return ret;
 }
 
+static void _opcpy(ogg_page *dest, ogg_page *src)
+{
+        dest->header = _ogg_malloc(src->header_len);
+        memcpy(dest->header, src->header, src->header_len);
+        dest->header_len = src->header_len;
+        dest->body = _ogg_malloc(src->body_len);
+        memcpy(dest->body, src->body, src->body_len);
+        dest->body_len = src->body_len;
+}
+
+static void _opclear(ogg_page *og)
+{
+        _ogg_free(og->header);
+        _ogg_free(og->body);
+}
+
+static void _add_extrapage(vcedit_state *s, ogg_page *page)
+{
+        s->extrapages = (ogg_page*)g_realloc(s->extrapages, (s->nextrapages+1)*sizeof(ogg_page));
+        _opcpy(s->extrapages+s->nextrapages, page);
+        ++s->nextrapages;
+}
+
+static int _get_next_extrapage(vcedit_state *s, ogg_page *page)
+{
+        if (s->nextrapages == 0)
+                return 0;
+        memcpy(page, s->extrapages, sizeof(ogg_page));
+        --s->nextrapages;
+        memmove(s->extrapages, s->extrapages+1, s->nextrapages*sizeof(ogg_page));
+        return 1;
+}
+
 static int _fetch_next_packet(vcedit_state *s, ogg_packet *p, ogg_page *page)
 {
 	int result;
@@ -163,16 +196,17 @@
 			if(bytes == 0) 
 				return 0;
 		}
-		if(ogg_page_eos(page))
-			s->eosin = 1;
-		else if(ogg_page_serialno(page) != s->serial)
+		if(ogg_page_serialno(page) != s->serial)
 		{
-			s->eosin = 1;
-			s->extrapage = 1;
-			return 0;
+			_add_extrapage(s, page);
 		}
+                else
+                {
+		        ogg_stream_pagein(s->os, page);
+		        if(ogg_page_eos(page))
+			        s->eosin = 1;
+                }
 
-		ogg_stream_pagein(s->os, page);
 		return _fetch_next_packet(s, p, page);
 	}
 }
@@ -200,6 +234,9 @@
 	state->read = read_func;
 	state->write = write_func;
 
+	state->extrapages = NULL;
+	state->nextrapages = 0;
+
 	state->oy = g_malloc(sizeof(ogg_sync_state));
 	ogg_sync_init(state->oy);
 
@@ -257,26 +294,31 @@
 			if(result == 0) break; /* Too little data so far */
 			else if(result == 1)
 			{
-				ogg_stream_pagein(state->os, &og);
-				while(i<2)
-				{
-					result = ogg_stream_packetout(state->os, header);
-					if(result == 0) break;
-					if(result == -1)
-					{
-						state->lasterror = "Corrupt secondary header.";
-						goto err;
-					}
-					vorbis_synthesis_headerin(&state->vi, state->vc, header);
-					if(i==1)
-					{
-						state->booklen = header->bytes;
-						state->bookbuf = g_malloc(state->booklen);
-						memcpy(state->bookbuf, header->packet, 
-								header->bytes);
-					}
-					i++;
-					header = &header_codebooks;
+                                if (state->serial != ogg_page_serialno(&og)) {
+                                        _add_extrapage(state, &og);
+                                }
+                                else {
+				        ogg_stream_pagein(state->os, &og);
+				        while(i<2)
+				        {
+					        result = ogg_stream_packetout(state->os, header);
+					        if(result == 0) break;
+					        if(result == -1)
+					        {
+						        state->lasterror = "Corrupt secondary header.";
+						        goto err;
+					        }
+					        vorbis_synthesis_headerin(&state->vi, state->vc, header);
+					        if(i==1)
+					        {
+						        state->booklen = header->bytes;
+						        state->bookbuf = g_malloc(state->booklen);
+						        memcpy(state->bookbuf, header->packet, 
+								        header->bytes);
+					        }
+					        i++;
+					        header = &header_codebooks;
+                                        }
 				}
 			}
 		}
@@ -303,6 +345,31 @@
 	return -1;
 }
 
+static int write_page(vcedit_state *s, ogg_page *og, void *out)
+{
+        if(s->write(og->header,1,og->header_len, out) != (size_t) og->header_len)
+                return 0;
+        if (s->write(og->body,1,og->body_len, out) != (size_t) og->body_len)
+                return 0;
+
+        return 1;
+}
+
+static int _flush_extrapages(vcedit_state *s, void *out)
+{
+        ogg_page og;
+
+	if (s->nextrapages)
+	{
+                while (_get_next_extrapage(s, &og)) {
+                        if (!write_page(s, &og, out))
+			        return 0;
+                        _opclear(&og);
+                }
+	}
+        return 1;
+}
+
 int vcedit_write(vcedit_state *state, void *out)
 {
 	ogg_stream_state streamout;
@@ -319,7 +386,6 @@
 	int needflush=0, needout=0;
 
 	state->eosin = 0;
-	state->extrapage = 0;
 
 	header_main.bytes = state->mainlen;
 	header_main.packet = state->mainbuf;
@@ -343,17 +409,27 @@
 
 	while((result = ogg_stream_flush(&streamout, &ogout)))
 	{
-		if(state->write(ogout.header,1,ogout.header_len, out) !=
-				(size_t) ogout.header_len)
-			goto cleanup;
-		if(state->write(ogout.body,1,ogout.body_len, out) != 
-				(size_t) ogout.body_len)
+                if (!write_page(state, &ogout, out))
 			goto cleanup;
+
+                /* now, we have written the Vorbis BOS header, so it is time to write the BOS
+                   header of any other stream we have - due to the Ogg spec, these are now
+                   conveniently at the beginning of the extrapages list */
+                while (state->nextrapages > 0 && ogg_page_bos(state->extrapages)) {
+                        _get_next_extrapage(state, &ogin);
+                        if (!write_page(state, &ogin, out))
+			        goto cleanup;
+                        _opclear(&ogin);
+                }
 	}
 
 	while(_fetch_next_packet(state, &op, &ogin))
 	{
 		int size;
+
+                if (!_flush_extrapages(state, out))
+                       goto cleanup;
+
 		size = _blocksize(state, &op);
 		granpos += size;
 
@@ -361,11 +437,7 @@
 		{
 			if(ogg_stream_flush(&streamout, &ogout))
 			{
-				if(state->write(ogout.header,1,ogout.header_len, 
-							out) != (size_t) ogout.header_len)
-					goto cleanup;
-				if(state->write(ogout.body,1,ogout.body_len, 
-							out) != (size_t) ogout.body_len)
+				if(!write_page(state, &ogout, out))
 					goto cleanup;
 			}
 		}
@@ -373,11 +445,7 @@
 		{
 			if(ogg_stream_pageout(&streamout, &ogout))
 			{
-				if(state->write(ogout.header,1,ogout.header_len, 
-							out) != (size_t) ogout.header_len)
-					goto cleanup;
-				if(state->write(ogout.body,1,ogout.body_len, 
-							out) != (size_t) ogout.body_len)
+				if(!write_page(state, &ogout, out))
 					goto cleanup;
 			}
 		}
@@ -406,14 +474,16 @@
 		}		
 	}
 
+        while (_get_next_extrapage(state, &ogin)) {
+                if (!write_page(state, &ogin, out))
+		        goto cleanup;
+                _opclear(&ogin);
+        }
+
 	streamout.e_o_s = 1;
 	while(ogg_stream_flush(&streamout, &ogout))
 	{
-		if(state->write(ogout.header,1,ogout.header_len, 
-					out) != (size_t) ogout.header_len)
-			goto cleanup;
-		if(state->write(ogout.body,1,ogout.body_len, 
-					out) != (size_t) ogout.body_len)
+		if(!write_page(state, &ogout, out))
 			goto cleanup;
 	}
 
@@ -421,16 +491,6 @@
 	/* Done with this, now */
 	vorbis_info_clear(&state->vi);
 
-	if (state->extrapage)
-	{
-		if(state->write(ogin.header,1,ogin.header_len,
-		                out) != (size_t) ogin.header_len)
-			goto cleanup;
-		if (state->write(ogin.body,1,ogin.body_len, out) !=
-				(size_t) ogin.body_len)
-			goto cleanup;
-	}
-
 	state->eosin=0; /* clear it, because not all paths to here do */
 	while(!state->eosin) /* We reached eos, not eof */
 	{
@@ -446,11 +506,7 @@
 			{
 				/* Don't bother going through the rest, we can just 
 				 * write the page out now */
-				if(state->write(ogout.header,1,ogout.header_len, 
-						out) != (size_t) ogout.header_len)
-					goto cleanup;
-				if(state->write(ogout.body,1,ogout.body_len, out) !=
-						(size_t) ogout.body_len)
+		                if(!write_page(state, &ogout, out))
 					goto cleanup;
 			}
 		}
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/vcedit.h xmms-1.2.11/Input/vorbis/vcedit.h
--- xmms-1.2.11-original/Input/vorbis/vcedit.h	2001-12-17 00:57:20.000000000 +0000
+++ xmms-1.2.11/Input/vorbis/vcedit.h	2008-07-16 10:07:50.000000000 +0100
@@ -40,7 +40,8 @@
 	char 	    *lasterror;
 	char   *vendor;
 	int prevW;
-	int extrapage;
+        ogg_page *extrapages;
+	int nextrapages;
 	int eosin;
 } vcedit_state;
 
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/vorbis.c xmms-1.2.11/Input/vorbis/vorbis.c
--- xmms-1.2.11-original/Input/vorbis/vorbis.c	2006-07-16 14:40:04.000000000 +0100
+++ xmms-1.2.11/Input/vorbis/vorbis.c	2008-10-25 20:52:07.000000000 +0100
@@ -42,6 +42,9 @@
 #include <ogg/ogg.h>
 #include <vorbis/codec.h>
 #include <vorbis/vorbisfile.h>
+#ifdef HAVE_KATE
+#include <kate/kate.h>
+#endif
 
 #include "xmms/plugin.h"
 #include "libxmms/util.h"
@@ -111,6 +114,11 @@
 };
 
 static OggVorbis_File vf;
+static kate_state k;
+static ogg_stream_state kst;
+static ogg_sync_state ksy;
+static int kst_initialized = 0;
+static int kate_initialized = 0;
 
 static pthread_t tid;
 int vorbis_playing;
@@ -123,6 +131,12 @@
 static int samplerate, channels;
 pthread_mutex_t vf_mutex = PTHREAD_MUTEX_INITIALIZER;
 static gboolean output_error;
+typedef struct {
+  char *text;
+  double t;
+} lyrics_event;
+static lyrics_event *lyrics_events = NULL;
+static size_t num_lyrics_events = 0;
 	
 
 InputPlugin *get_iplugin_info(void)
@@ -131,11 +145,187 @@
 	return &vorbis_ip;
 }
 
+static void add_lyrics_event(const char *text, double t)
+{
+        lyrics_event *new_lyrics_events = (lyrics_event*)g_realloc(lyrics_events, (num_lyrics_events+1)*sizeof(lyrics_event));
+        if (!new_lyrics_events) {
+                /* failed to allocate: just drop the new line on the floor and continue */
+                return;
+        }
+        lyrics_events = new_lyrics_events;
+
+        new_lyrics_events[num_lyrics_events].text = g_strdup(text);
+        new_lyrics_events[num_lyrics_events].t = t;
+
+        ++num_lyrics_events;
+}
+
+static char *get_next_lyrics_event(double t)
+{
+        char *text;
+
+        if (num_lyrics_events == 0) return NULL;
+        if (lyrics_events[0].t + vorbis_cfg.kate_offset/1000.0 > t) return NULL;
+
+        text = lyrics_events[0].text;
+        --num_lyrics_events;
+        memmove(lyrics_events, lyrics_events+1, sizeof(lyrics_event)*num_lyrics_events);
+
+        return text; /* caller owns and must free */
+}
+
+static void clear_lyrics_events()
+{
+        size_t n;
+        for (n=0; n<num_lyrics_events; ++n) {
+                /* NULL is fine to free */
+                g_free(lyrics_events[n].text);
+        }
+        g_free(lyrics_events);
+        lyrics_events = NULL;
+        num_lyrics_events = 0;
+
+        vorbis_ip.set_info_text("");
+}
+
+static void shutdown_kate()
+{
+        if (kst_initialized) {
+                ogg_stream_clear(&kst);
+        }
+        ogg_sync_clear(&ksy);
+        if (kate_initialized) {
+                kate_high_decode_clear(&k);
+        }
+
+        kst_initialized = 0;
+        kate_initialized = 0;
+
+        clear_lyrics_events();
+}
+
+static void setup_kate()
+{
+        ogg_sync_init(&ksy);
+        kst_initialized = 0;
+
+        clear_lyrics_events();
+}
+
+static void reset_kate()
+{
+        if (kst_initialized) {
+                ogg_stream_clear(&kst);
+        }
+        if (kate_initialized) {
+                kate_high_decode_clear(&k);
+        }
+
+        kst_initialized = 0;
+        kate_initialized = 0;
+
+        clear_lyrics_events();
+}
+
+static int is_kate_bos(ogg_page *og)
+{
+        ogg_stream_state os;
+        ogg_packet op;
+        int kate_bos;
+
+        if (!ogg_page_bos(og)) return 0;
+        ogg_stream_init(&os, ogg_page_serialno (og));
+        ogg_stream_pagein(&os, og);
+        ogg_stream_packetpeek(&os, &op);
+        kate_bos = (op.bytes>=8 && !memcmp(op.packet,"\200kate\0\0\0",8));
+        ogg_stream_clear(&os);
+        return kate_bos;
+}
+
+static void process_kate(void *ptr, size_t sz)
+{
+        int ret;
+        ogg_page og;
+        ogg_packet op;
+        char *buffer;
+
+        buffer = ogg_sync_buffer(&ksy, sz);
+        if (buffer) {
+                memcpy(buffer, ptr, sz);
+                ogg_sync_wrote(&ksy, sz);
+        }
+
+        while (ogg_sync_pageout(&ksy, &og) > 0) {
+                /* if we get a Kate BOS, reset */
+                if (is_kate_bos(&og)) {
+                        reset_kate();
+                        ogg_stream_init(&kst, ogg_page_serialno (&og));
+                        ogg_stream_pagein(&kst, &og);
+                        ret = kate_high_decode_init(&k);
+                        if (ret < 0) {
+                                /* failed to init libkate for decoding */
+                                ogg_stream_clear(&kst);
+                        }
+                        else {
+                                if (ogg_stream_packetout(&kst, &op) > 0) {
+                                        kate_packet kp;
+                                        kate_packet_wrap(&kp, op.bytes, op.packet);
+                                        ret = kate_high_decode_packetin(&k, &kp, NULL);
+                                        if (ret < 0) {
+                                                /* failed to decode Kate ID header */
+                                                kate_high_decode_clear(&k);
+                                                ogg_stream_clear(&kst);
+                                        }
+                                        else {
+                                                if (!vorbis_cfg.show_all_kate_streams && strcmp(k.ki->category, "lyrics")) {
+                                                        /* not lyrics, and we're not asked to play other streams */
+                                                        kate_high_decode_clear(&k);
+                                                        ogg_stream_clear(&kst);
+                                                }
+                                                else {
+                                                        kst_initialized = 1;
+                                                        kate_initialized = 1;
+                                                }
+                                        }
+                                }
+                                else {
+                                        /* the Initial Kate page did not contain a Kate BOS header */
+                                        kate_high_decode_clear(&k);
+                                        ogg_stream_clear(&kst);
+                                }
+                        }
+                }
+                else {
+                        ogg_stream_pagein(&kst, &og);
+                }
+
+                if (kate_initialized) while (ogg_stream_packetout(&kst, &op) > 0) {
+                        const kate_event *ev = NULL;
+                        kate_packet kp;
+                        kate_packet_wrap(&kp, op.bytes, op.packet);
+                        ret = kate_high_decode_packetin(&k, &kp, &ev);
+                        if (ret < 0) {
+                                /* failed to decode Kate packet */
+                        }
+                        else {
+                                if (ev) {
+                                        add_lyrics_event(ev->text, ev->start_time);
+                                        add_lyrics_event("", ev->end_time);
+                                }
+                                if (ret > 0) {
+                                        /* eos */
+                                        reset_kate();
+                                }
+                        }
+                }
+        }
+}
+
 static int vorbis_check_file(char *filename)
 {
 	FILE *stream;
 	OggVorbis_File vfile; /* avoid thread interaction */
-	char *ext;
+	const char *ext;
 
 	/* is this our http resource? */
 	if (strncasecmp(filename, "http://", 7) == 0) {
@@ -144,6 +334,9 @@
 			if (!strncasecmp(ext, ".ogg", 4)) {
 				return TRUE;
 			}
+			if (!strncasecmp(ext, ".oga", 4)) {
+				return TRUE;
+			}
 		}
 		return FALSE;
 	}
@@ -321,6 +514,7 @@
 	double time;
 	long timercount = 0;
 	vorbis_info *vi;
+        char *text;
 
 	int last_section = -1;
 
@@ -352,6 +546,8 @@
 	 * without it
 	 */
 
+        setup_kate();
+
 	pthread_mutex_lock(&vf_mutex);
 	if (ov_open_callbacks(datasource, &vf, NULL, 0, vorbis_callbacks) < 0)
 	{
@@ -462,6 +658,14 @@
 						   samplerate, channels);
 			timercount = vorbis_ip.output->output_time();
 		}
+
+                text = get_next_lyrics_event(vorbis_time()/1000.0);
+                if (text) {
+                        if (vorbis_cfg.show_kate_lyrics) {
+                                vorbis_ip.set_info_text(text);
+                        }
+                        g_free(text);
+                }
 	}
 	output_opened = FALSE;
 	if (!output_error)
@@ -774,6 +978,7 @@
 		  "Jorn Baayen <jorn@nl.linux.org>\n"
 		  "Haavard Kvaalen <havardk@xmms.org>\n"
 		  "Gian-Carlo Pascutto <gcp@sjeng.org>\n\n"
+		  "ogg.k.ogg.k <ogg.k.ogg.k@googlemail.com>\n\n"
 		  "Visit the Xiph.org Foundation at http://www.xiph.org/\n"),
 		_("OK"), FALSE, NULL, NULL);
 	gtk_signal_connect(GTK_OBJECT(about_window), "destroy",
@@ -798,6 +1003,9 @@
 	vorbis_cfg.use_replaygain = FALSE;
 	vorbis_cfg.replaygain_mode = REPLAYGAIN_MODE_TRACK;
 	vorbis_cfg.use_booster = FALSE;
+        vorbis_cfg.show_kate_lyrics = TRUE;
+        vorbis_cfg.show_all_kate_streams = FALSE;
+        vorbis_cfg.kate_offset = 0;
 
 	cfg = xmms_cfg_open_default_file();
 	xmms_cfg_read_int(cfg, "vorbis", "http_buffer_size",
@@ -830,6 +1038,9 @@
 	xmms_cfg_read_boolean(cfg, "vorbis", "use_replaygain", &vorbis_cfg.use_replaygain);
 	xmms_cfg_read_int(cfg, "vorbis", "replaygain_mode", &vorbis_cfg.replaygain_mode);
 	xmms_cfg_read_boolean(cfg, "vorbis", "use_booster", &vorbis_cfg.use_booster);
+	xmms_cfg_read_boolean(cfg, "vorbis", "show_kate_lyrics", &vorbis_cfg.show_kate_lyrics);
+	xmms_cfg_read_boolean(cfg, "vorbis", "show_all_kate_streams", &vorbis_cfg.show_all_kate_streams);
+	xmms_cfg_read_boolean(cfg, "vorbis", "kate_offset", &vorbis_cfg.kate_offset);
 	xmms_cfg_free(cfg);
 }
 
@@ -842,14 +1053,21 @@
 		/* this is a stream */
 		tmp = vorbis_http_read(ptr, size * nmemb);
 		vorbis_bytes_streamed += tmp;
-		return tmp;
 	}
+        else {
+	        tmp = fread(ptr, size, nmemb, (FILE *)datasource);
+        }
+
+        process_kate(ptr, tmp);
 
-	return fread(ptr, size, nmemb, (FILE *)datasource);
+	return tmp;
 }
 
 static int ovcb_seek(void *datasource, int64_t offset, int whence)
 {
+        ogg_sync_reset(&ksy);
+        clear_lyrics_events();
+
 	if (vorbis_is_streaming) {
 		/* this is a stream */
 		/* streams aren't seekable */
@@ -861,6 +1079,8 @@
 
 static int ovcb_close(void *datasource)
 {
+        shutdown_kate();
+
 	if (vorbis_is_streaming) {
 		/* this is a stream */
 		vorbis_http_close();
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/Input/vorbis/vorbis.h xmms-1.2.11/Input/vorbis/vorbis.h
--- xmms-1.2.11-original/Input/vorbis/vorbis.h	2004-04-04 09:51:20.000000000 +0100
+++ xmms-1.2.11/Input/vorbis/vorbis.h	2008-10-25 20:24:58.000000000 +0100
@@ -21,6 +21,9 @@
 	gboolean use_replaygain;
 	gint replaygain_mode;
 	gboolean use_booster;
+	gboolean show_kate_lyrics;
+	gboolean show_all_kate_streams;
+        gint kate_offset;
 } vorbis_config_t;
 
 enum {
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/README xmms-1.2.11/README
--- xmms-1.2.11-original/README	2007-11-16 21:51:23.000000000 +0000
+++ xmms-1.2.11/README	2008-10-21 20:30:51.000000000 +0100
@@ -107,6 +107,10 @@
 
    http://www.vorbis.com/download_unix.psp
 
+For Kate lyrics support, you'll need libkate from:
+
+   http://libkate.googlecode.com/
+
 2.1 Basic Installation
 ----------------------
 
@@ -214,6 +218,8 @@
   This also contains the length of the song being played, as well as its
   position in the [unsorted] playlist. Right clicking in this window will bring
   up a new menu with some more options that are self explaining.
+  If your're playing a Vorbis stream with embedded Kate lyrics, this is where
+  the lyrics will show up in sync with the song.
 
 - In the left part of the Spectrum analyzer you'll have letters (at least if
   you use the default skin) O A I D V  left mouse clicking on these will open
@@ -851,7 +857,7 @@
 -------------------------
 
 Plays OGG Vorbis encoded files, see http://www.xiph.org/ogg/vorbis/
-for more information.
+for more information. Embedded Kate lyrics are also supported.
 
 
 3.6.1.6 Wave player
@@ -1196,6 +1202,7 @@
 Plays MPEG layer 1/2/3 also wav and formats supported by mikmod
 Compiles and works on other UNIX's
 Proxy authentication support
+Kate lyrics embedded in Ogg alongside Vorbis
 
 
 6. Obtaining XMMS
diff -x config.h.in -x configure -x aclocal.m4 -x Makefile -x Makefile.in -ru xmms-1.2.11-original/configure.in xmms-1.2.11/configure.in
--- xmms-1.2.11-original/configure.in	2007-11-16 21:52:30.000000000 +0000
+++ xmms-1.2.11/configure.in	2008-07-15 19:24:15.000000000 +0100
@@ -272,6 +272,25 @@
 
 
 dnl ***
+dnl *** Kate
+dnl ***
+if test "x$have_oggvorbis" = "xyes"; then
+        dnl Kate is used to retrieve embedded lyrics, so no need to check it if not using the Vorbis plugin
+	AC_CHECK_HEADERS([kate/kate.h],
+		AC_CHECK_LIB([kate],[kate_decode_init],[have_kate=yes],[AC_MSG_RESULT([no])],-logg -lm),
+                AC_MSG_RESULT([no])
+        )
+	if test "x$have_kate" = "xyes"; then
+		AC_DEFINE([HAVE_KATE],1,[Define if libkate is available.])
+		KATE_LIBS="-lkate -logg -lm"
+		KATE_CFLAGS=""
+ 	fi
+fi
+AM_CONDITIONAL([HAVE_KATE], [test "x$have_kate" = "xyes"])
+AC_SUBST([KATE_CFLAGS])
+AC_SUBST([KATE_LIBS])
+
+dnl ***
 dnl *** Thread-safe xlib check
 dnl ***
 CFLAGS_save=$CFLAGS
